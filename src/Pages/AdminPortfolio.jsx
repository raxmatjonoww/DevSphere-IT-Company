import React, { useEffect, useState } from "react";
import { supabase } from "../supabaseClient";
import "./AdminPortfolio.css";

const AdminPortfolio = () => {
  const [projects, setProjects] = useState([]);
  const [form, setForm] = useState({
    title: "",
    description: "",
    image: "",
    link: "",
  });
  const [editingId, setEditingId] = useState(null);

  useEffect(() => {
    fetchProjects();
  }, []);

  const fetchProjects = async () => {
    const { data } = await supabase
      .from("portfolio")
      .select("*")
      .order("created_at", { ascending: false });
    if (data) setProjects(data);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    const { title, description, image } = form;
    if (!title || !description || !image) {
      alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è.");
      return;
    }

    if (editingId) {
      await supabase.from("portfolio").update(form).eq("id", editingId);
      setEditingId(null);
    } else {
      await supabase.from("portfolio").insert([{ ...form }]);
    }

    setForm({ title: "", description: "", image: "", link: "" });
    fetchProjects();
  };

  const handleEdit = (project) => {
    setForm({
      title: project.title,
      description: project.description,
      image: project.image,
      link: project.link || "",
    });
    setEditingId(project.id);
  };

  const handleDelete = async (id) => {
    if (window.confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç?")) {
      await supabase.from("portfolio").delete().eq("id", id);
      fetchProjects();
    }
  };

  return (
    <div className="admin-portfolio">
      <h1>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ</h1>

      <form className="admin-form" onSubmit={handleSubmit}>
        <input
          type="text"
          placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"
          value={form.title}
          onChange={(e) => setForm({ ...form, title: e.target.value })}
        />
        <textarea
          placeholder="–û–ø–∏—Å–∞–Ω–∏–µ"
          value={form.description}
          onChange={(e) => setForm({ ...form, description: e.target.value })}
        />
        <input
          type="text"
          placeholder="–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
          value={form.image}
          onChange={(e) => setForm({ ...form, image: e.target.value })}
        />
        <input
          type="text"
          placeholder="–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
          value={form.link}
          onChange={(e) => setForm({ ...form, link: e.target.value })}
        />
        <button type="submit">
          {editingId ? "–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç" : "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç"}
        </button>
      </form>

      <div className="project-list">
        {projects.map((project) => (
          <div key={project.id} className="project-card">
            <img src={project.image} alt={project.title} />
            <h3>{project.title}</h3>
            <p>{project.description}</p>
            {project.link && (
              <a
                href={project.link}
                target="_blank"
                rel="noopener noreferrer"
                className="visit-link"
              >
                –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç ‚Üí
              </a>
            )}
            <div className="btn-group">
              <button onClick={() => handleEdit(project)} className="edit">
                ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
              </button>
              <button
                onClick={() => handleDelete(project.id)}
                className="delete"
              >
                üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
              </button>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default AdminPortfolio;
